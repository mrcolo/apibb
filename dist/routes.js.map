{"version":3,"sources":["../src/routes.js"],"names":["routes","allIndexOf","str","toSearch","indices","pos","indexOf","push","get","req","res","console","log","error","response","body","result","JSON","parse","randomimg","Math","floor","random","results","length","redirect","urls","regular","url","query","q","client","timeout","options","uri","transform","load","on","then","$","textplain","text","junkHTMLfirst","junkHTMLlast","i","replace","substring","source","substr","headline","title","author","clientServerOptions","stringify","method","headers","end","catch","err","fetch"],"mappings":"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","file":"routes.js","sourcesContent":["import { Router } from 'express';\nimport MetaInspector from 'node-metainspector';\nimport cheerio from 'cheerio'\nimport rp from 'request-promise'\nimport request from 'request'\n\nconst routes = Router();\n//function to return an array with all the indexes where toSearch appears in str.\nfunction allIndexOf(str, toSearch) {\n    var indices = [];\n    for(var pos = str.indexOf(toSearch); pos !== -1; pos = str.indexOf(toSearch, pos + 1)) {\n        indices.push(pos);\n    }\n    return indices;\n}\n\nroutes.get('/newbackground',(req,res) =>{\n  console.log(\"ciao\")\n  request('https://api.unsplash.com/search/photos?page=1&query=politics&client_id=973a11bf6f7bd816ef86e6248d6e87a727fc592b3512b6ea86f6dbb4b96eff81', function (error, response, body) {\n    //parse body of response into JSON\n    let result = JSON.parse(response.body);\n    //generate random number and get a random result which will translate into a random image for the background of the app.\n    let randomimg = Math.floor(Math.random() * result.results.length);\n    //redirect me to the url of that random image.\n    res.redirect(result.results[randomimg].urls.regular);\n  });\n})\n\nroutes.get('/retrieveData',(req,res) =>{\n  //get query q into variable url\n\n  const url = req.query.q;\n  //initialize metainspector\n  const client = new MetaInspector(url, { timeout: 5000 });\n\n  const options = {\n    uri: url,\n    transform: function (body) {\n      return cheerio.load(body);\n    }\n  };\n\n  client.on(\"fetch\", function(){\n    //when fetching, create a request-promise to a web-crawler which will load the body into the variable $.\n    rp(options)\n      .then(($) => {\n        //after the promise is returned, assign the body to a variable called textplain.\n        let textplain = $(\"body\").text();\n\n        //get rid of html tags as they could confuse our machine learning algorithm.\n        let junkHTMLfirst = allIndexOf(textplain,'<');\n        let junkHTMLlast = allIndexOf(textplain,'>');\n        for(var i = 0;i<junkHTMLfirst.length;i++){\n          textplain = textplain.replace(textplain.substring(junkHTMLfirst[i], junkHTMLlast[i]+1),\" \")\n        }\n        //start creating the result object\n        let result = {\n          source: url.substr(url.indexOf(\"www.\")+4,url.indexOf('.com')-12),\n          headline: client.title,\n          author: client.author,\n          text: textplain\n          }\n        //generate the options for request to python server\n        let clientServerOptions = {\n                uri: 'https://apybb.herokuapp.com/retrieveInfo',\n                body: JSON.stringify(result),\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            }\n       //POST request to python server.\n       request(clientServerOptions, function (error, response) {\n                res.end(response.body);\n            });\n\n      })\n      .catch((err) => {\n        console.log(err);\n        res.end(\"ERR\")\n      });\n});\n\n  client.on(\"error\", function(err){\n      console.log(err);\n  });\n  //fetch data using web-crawler.\n  client.fetch();\n})\n\nexport default routes;\n"]}